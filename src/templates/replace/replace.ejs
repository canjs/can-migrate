// This is a generated file, see src/templates/replace/replace.ejs
import getConfig from '../../../utils/getConfig';
import dependencyUtils from '../../../utils/dependencyUtils';
import makeDebug from 'debug';

export default function transformer(file, api, options) {
  const debug = makeDebug(`can-migrate:can-<%= shortName %>-replace:${file.path}`);
  const config = getConfig(options.config);
  const j = api.jscodeshift;
  const printOptions = options.printOptions || {};
  const root = j(file.source);
  let found = false;
  const newName = config.moduleToName['<%= sourceValue %>'];

  debug(`Finding all instances of '<%= oldObjectName %>.<%= oldPropertyName %>'`);
  root.find(j.MemberExpression).filter(expression => {
    let match = true;
    <% if( oldObjectName.indexOf('.') !== -1) { %>
    if(expression.value.object.property) {
      const parts = '<%= oldObjectName %>'.split('.');
      const objectName = parts[0];
      const objectProp = parts[1];
      // Figure out if the nested object matches
      match = match &&
        expression.value.object.object.name === objectName &&
        expression.value.object.property.name === objectProp;
    } else {
      return false;
    }
    <% } else { %>
      match = match && expression.value.object.name === '<%= oldObjectName %>';
    <% } %>
    return match && expression.value.property.name === '<%= oldPropertyName %>';
  }).forEach(expression => {
    debug(`Replacing all instances of '<%= oldObjectName %>.<%= oldPropertyName %>' with '${newName}<% if( newPropertyName ) { %>.<%= newPropertyName %><% } %>'`);
    found = true;
    <% if( newPropertyName ) { %>
    // can.event.addEvent -> canEvent.addEventListener
    j(expression).replaceWith(j.memberExpression(j.identifier(newName), j.identifier('<%= newPropertyName %>')));
    <% } else { %>
    // can.Map -> canMap
    j(expression).replaceWith(j.identifier(newName));
    <% } %>
  });

  if (found) {
    dependencyUtils.add(root, '<%= sourceValue %>', newName, ['can', 'can/', 'can/can', 'can/can.js']);
  }
  return root.toSource(printOptions);
}
